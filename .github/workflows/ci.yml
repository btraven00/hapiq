name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-no-fail -fmt sarif -out results.sarif ./..."

      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  dependency-scan:
    name: Dependency Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Nancy vulnerability scanner
        continue-on-error: true
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth || echo "Nancy scan completed with warnings"

      - name: Check for known security advisories
        continue-on-error: true
        run: |
          go mod download
          go list -json -m all | jq -r '.Path + "@" + .Version' | sort | uniq > dependencies.txt || true
          echo "Dependencies to check:"
          cat dependencies.txt || echo "No dependencies found"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p bin
          if [ "$GOOS" = "windows" ]; then
            go build -o bin/hapiq-$GOOS-$GOARCH.exe -ldflags="-s -w -X main.version=$GITHUB_REF_NAME" .
          else
            go build -o bin/hapiq-$GOOS-$GOARCH -ldflags="-s -w -X main.version=$GITHUB_REF_NAME" .
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hapiq-${{ matrix.goos }}-${{ matrix.goarch }}
          path: bin/hapiq-*

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: btraven00/hapiq
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release directory
        run: mkdir -p release

      - name: Prepare release assets
        run: |
          for dir in hapiq-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              if ls hapiq-*.exe 1> /dev/null 2>&1; then
                # Windows binary
                zip "../release/${dir}.zip" hapiq-*.exe
              else
                # Unix binary
                tar -czf "../release/${dir}.tar.gz" hapiq-*
              fi
              cd ..
            fi
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        test-type: [basic, real-world]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: hapiq-linux-amd64

      - name: Make binary executable
        run: chmod +x hapiq-linux-amd64

      - name: Run basic integration tests
        if: matrix.test-type == 'basic'
        run: |
          ./hapiq-linux-amd64 --help
          ./hapiq-linux-amd64 check --help

      - name: Run real-world integration tests
        if: matrix.test-type == 'real-world'
        run: |
          # Test with a known good Zenodo record (small dataset)
          ./hapiq-linux-amd64 check "https://zenodo.org/record/3242074" --output json

          # Test with DOI
          ./hapiq-linux-amd64 check "10.5281/zenodo.3242074" --output json

          # Test with invalid URL (should fail gracefully)
          ./hapiq-linux-amd64 check "https://invalid-url-that-does-not-exist.com" --output json || true

      - name: Run performance tests
        if: matrix.test-type == 'basic'
        run: |
          echo "Testing response time for validation..."
          time ./hapiq-linux-amd64 check "10.5281/zenodo.123456" --output json || true
